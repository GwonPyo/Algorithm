# My Solution(68ms)
'''
이친 수는 0과 1으로 이루어진 수이며 다음과 같은 조건을 만족한다.
1. 이친수는 0으로 시작하지 않는다.
2. 이친수에서는 1이 두 번 연속으로 나타나지 않는다. 즉, 11을 부분 문자열로 갖지 않는다.

이친수의 맨 뒷자리 수는 0혹은 1로 끝난다.
이 수들을 맨 뒷자리 수를 기준으로 나누어 이차원 배열로 나타내보자.

  0 1
0 0 1
1 1 0
2 1 1
3 2 1

맨 뒷자리가 0인 경우, 0혹은 1이 올 수 있고, 1인 경우 0만 올 수 있다.
즉, 임의의 n번째 행에서 마지막 자리의 수가 0인 이친수는 dp[n-1][0]+dp[n-1][1]이고,
마지막 자리의 수가 1인 이친수는 dp[n-1][0]이 되는 것이다.
해당 규칙을 코드로 표현한 것이 아래 코드이다. 
'''
n = int(input())                                # 1 ≤ N ≤ 90
dp = [[0 for _ in range(2)] for _ in range(n)]  # dp에 사용할 이차원 배열을 생성한다.

dp[0][1] = 1                                    # 일의 자리의 이친수는 미리 처리해준다.

for i in range(1, n):                           # 2~n의 자리의 이친수를 처리해야하므로 1~n까지 반복한다.
    dp[i][0] = dp[i-1][0]+dp[i-1][1]            # 위에서 설명한 규칙을 토대로 값들을 갱신한다.
    dp[i][1] = dp[i-1][0]

print(sum(dp[n-1]))                             # n자리 수의 이친수를 저장한 행의 모든 데이터를 더해 출력한다.
